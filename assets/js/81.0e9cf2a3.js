(window.webpackJsonp=window.webpackJsonp||[]).push([[81],{259:function(e,t,a){"use strict";a.r(t);var s=a(0),i=Object(s.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("div",{staticClass:"content"},[a("h2",{attrs:{id:"ontology"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ontology","aria-hidden":"true"}},[e._v("#")]),e._v(" Ontology")]),e._v(" "),a("p",[e._v("We begin our understanding of ontology by first looking at the notion of a concept.")]),e._v(" "),a("h2",{attrs:{id:"concepts"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#concepts","aria-hidden":"true"}},[e._v("#")]),e._v(" Concepts")]),e._v(" "),a("p",[e._v("A concept is simply an object in your domain that the assistant is able to recognize. For example, in the marketing domain, we have concepts for mailings, open-rates, click-rates, etc. A concept in denoted by a colon "),a("code",[e._v(":")]),e._v(". For example "),a("code",[e._v(":Mailings")]),e._v(" denotes the mailings concepts. Concepts should additionally be prefixed with the domain of your skill. For example, "),a("code",[e._v("marketing:Mailings")]),e._v(" signifies the mailings concept in the marketing domain.")]),e._v(" "),a("p",[e._v("Concepts and their relationship to other concepts are defined in an ontology. In fact, an ontology is simply a set of relationships between different concepts in rdf format, i.e. "),a("em",[e._v("subject-predicate-object")]),e._v(" triples. Consider the following examples below.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(":OpenRate subClassOf :Showable\n")])])]),a("p",[e._v("Here we specify that :OpenRate is a concept which subclasses or derives from the :Showable concept. This system is able to visually render all :Showable objects, so we are effectively making our open rate concept viewable to the end user.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(":Mailings isListOf :Mailing\n")])])]),a("p",[e._v("Here we specify that the :Mailings concept is a list composed of individual :Mailing concepts. This is useful for actions that the assistant performs when working with collections.")]),e._v(" "),a("p",[e._v("Certain native predicates have significant meaning for our system. We will detail a few of them below.")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("subClassOf")]),e._v("  -- "),a("code",[e._v("a subClassOf b")]),e._v(" means that a inherits all of the attributes which b contains. This is particularly useful in the cases that we need to model a hierarchical domain. For instance, "),a("code",[e._v(":SalesOrder subClassOf :Order")]),e._v(" allows a particular entity to auto derive attributes from its base concept.")]),e._v(" "),a("li",[a("code",[e._v("isListOf")]),e._v("    -- "),a("code",[e._v("a listOf b")]),e._v(" means that a is a collection of b. This enables our system to automatically perform data operations on top of collections. For instance, "),a("code",[e._v(":Orders isListOf :Order")]),e._v(" and "),a("code",[e._v(":Order hasAttribute :Quantity")]),e._v(", we immediately begin to ask questions such as 'show me all orders where quantity is above 500'.")])])])}],!1,null,null,null);t.default=i.exports}}]);